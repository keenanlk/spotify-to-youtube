// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  youtube         YouTubeService[]
  conversions     Conversions[]
  conversionItems ConversionItems[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YouTubeService {
  id           String   @id @default(cuid())
  name         String
  channelId    String
  accessToken  String
  refreshToken String
  tokenExpires Int
  image        String
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Conversions {
  id                String            @id @default(cuid())
  spotifyPlaylistId String
  title             String
  description       String
  youtubePlaylistId String
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items             ConversionItems[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@unique([spotifyPlaylistId, userId])
}

model ConversionItems {
  id             String      @id @default(cuid())
  conversionId   String
  spotifyTrackId String
  youtubeVideoId String
  spotifyTitle   String
  youtubeTitle   String
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversion     Conversions @relation(fields: [conversionId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
